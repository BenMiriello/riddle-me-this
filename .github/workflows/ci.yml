name: CI/CD Pipeline

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Build all projects
        run: npm run build

  deploy-web:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Build web app
        run: npm run build --workspace=@riddle-me-this/web

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: riddle-me-this-web
          directory: apps/web/dist

  deploy-api:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Smart version increment
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get current version and check if already bumped
          CURRENT_VERSION=$(node -p "require('./apps/api/package.json').version" 2>/dev/null || echo "unknown")
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)

          # More precise check: only skip if commit message starts with version bump pattern
          if [[ "$LAST_COMMIT_MSG" =~ ^"chore: bump version to $CURRENT_VERSION" ]]; then
            echo "Version already bumped to $CURRENT_VERSION - skipping auto-increment"
          else
            echo "Auto-incrementing version from $CURRENT_VERSION"
            BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
            
            # Version bump with error handling
            if ! npm version $BUMP_TYPE --workspaces --no-git-tag-version; then
              echo "Version bump failed, aborting"
              exit 1
            fi
            
            NEW_VERSION=$(node -p "require('./apps/api/package.json').version" 2>/dev/null || echo "unknown")
            echo "Bumped to version $NEW_VERSION"
            
            # Add all version-related files
            git add apps/*/package.json packages/*/package.json package-lock.json || true
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            
            # Safe conflict resolution with retries
            git fetch origin production
            for attempt in {1..3}; do
              if git push origin production; then
                echo "Push successful on attempt $attempt"
                break
              elif [ $attempt -eq 3 ]; then
                echo "Push failed after 3 attempts, aborting"
                exit 1
              else
                echo "Push rejected, attempt $attempt/3 - syncing with remote..."
                # Reset to clean state and merge remote changes
                git reset --soft HEAD~1
                git pull origin production --no-edit
                # Add all version-related files that may have changed
                git add apps/*/package.json packages/*/package.json package-lock.json || true
                if ! git diff --cached --quiet; then
                  git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
                else
                  echo "No changes to commit after merge"
                fi
              fi
            done
          fi

      - name: Deploy API to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: apps/api
          command: deploy --env production --minify

      - name: Sync version back to main
        run: |
          git fetch origin main
          git checkout main
          git merge production --no-edit
          git push origin main
