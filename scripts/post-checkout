#!/bin/bash
# Git post-checkout hook
# Automatically checks for version mismatches when switching branches

# Debug: Uncomment next line to troubleshoot
# echo "🔧 Post-checkout hook triggered" >&2

# Only run on branch checkout (not file checkout)
if [ "$3" == "1" ]; then
  current_branch=$(git branch --show-current)
  
  # Skip if switching to a remote tracking branch or detached HEAD
  if [[ "$current_branch" == "" ]] || [[ "$current_branch" == *"HEAD"* ]]; then
    exit 0
  fi
  
  # Check if remote branch exists
  if ! git ls-remote --heads origin "$current_branch" | grep -q "$current_branch"; then
    # No remote branch exists, skip check
    exit 0
  fi
  
  echo "🔄 Checking $current_branch for updates..."
  git fetch origin "$current_branch" --quiet 2>/dev/null
  
  # Check if behind remote
  behind=$(git rev-list --count HEAD..origin/"$current_branch" 2>/dev/null || echo "0")
  
  if [ "$behind" -gt 0 ]; then
    # Check for version differences if package.json exists
    if [ -f "./apps/api/package.json" ]; then
      local_ver=$(node -p "require('./apps/api/package.json').version" 2>/dev/null || echo "unknown")
      remote_ver=$(git show origin/"$current_branch":apps/api/package.json 2>/dev/null | node -e "
        try {
          const pkg = JSON.parse(require('fs').readFileSync(0, 'utf8'));
          console.log(pkg.version);
        } catch(e) {
          console.log('unknown');
        }
      " 2>/dev/null || echo "unknown")
      
      if [ "$local_ver" != "$remote_ver" ] && [ "$remote_ver" != "unknown" ]; then
        echo "📦 Version mismatch on $current_branch:"
        echo "   Local:  v$local_ver"
        echo "   Remote: v$remote_ver"
        echo ""
        echo "Options: [p]ull changes, [l]og what's new, [s]kip"
        read -r response
        
        case $response in
          p|P|pull)
            git pull origin "$current_branch" --no-edit
            echo "✅ Synced $current_branch to v$remote_ver"
            ;;
          l|L|log)
            echo "📝 New commits on origin/$current_branch:"
            git log --oneline --graph HEAD..origin/"$current_branch"
            ;;
          *)
            echo "⏭️  Staying on local v$local_ver"
            ;;
        esac
      else
        # No version file or no version difference, just show commit info
        echo "📝 $current_branch is $behind commits behind origin"
        echo "Pull latest? [y/n]"
        read -r response
        if [ "$response" == "y" ] || [ "$response" == "Y" ]; then
          git pull origin "$current_branch" --no-edit
          echo "✅ Synced $current_branch"
        fi
      fi
    else
      # No package.json, just basic behind check
      echo "📝 $current_branch is $behind commits behind origin"
      echo "Pull latest? [y/n]"
      read -r response
      if [ "$response" == "y" ] || [ "$response" == "Y" ]; then
        git pull origin "$current_branch" --no-edit
        echo "✅ Synced $current_branch"
      fi
    fi
  else
    echo "✅ $current_branch is up to date"
  fi
fi